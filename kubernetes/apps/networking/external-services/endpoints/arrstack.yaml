---
apiVersion: v1
kind: Service
metadata:
  name: &app arrstack
  namespace: networking
  labels:
    app.kubernetes.io/name: *app
    app.kubernetes.io/instance: *app
spec:
  type: ExternalName
  externalName: media-services.${SECRET_DOMAIN_2}
  ports:
    - name: plex
      port: &plex 32400
      protocol: TCP
      targetPort: *plex
    - name: overseerr
      port: &overseerr 5055
      protocol: TCP
      targetPort: *overseerr
    - name: guacamole
      port: &guacamole 8086
      protocol: TCP
      targetPort: *guacamole
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: &app arrstack-plex
  namespace: networking
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: "plex.${SECRET_DOMAIN_2}"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
    nginx.ingress.kubernetes.io/server-snippet: |
      location = / {
        return 301 https://plex.${SECRET_DOMAIN_2}/web/index.html;
      }
    gethomepage.dev/enabled: "false"
  labels:
    app.kubernetes.io/name: *app
    app.kubernetes.io/instance: *app
spec:
  ingressClassName: nginx
  rules:
    - host: &host "plex.${SECRET_DOMAIN}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: arrstack
                port:
                  name: plex
  tls:
    - hosts:
        - *host
      secretName: "arrstack-${SECRET_DOMAIN_2/./-}-production-tls"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: &app arrstack-overseerr
  namespace: networking
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: "overseerr.${SECRET_DOMAIN_2}"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
    gethomepage.dev/enabled: "false"
  labels:
    app.kubernetes.io/name: *app
    app.kubernetes.io/instance: *app
spec:
  ingressClassName: nginx
  rules:
    - host: &host "overseerr.${SECRET_DOMAIN}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: arrstack
                port:
                  name: overseerr
  tls:
    - hosts:
        - *host
      secretName: "arrstack-${SECRET_DOMAIN_2/./-}-production-tls"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: &app arrstack-desktop
  namespace: networking
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: "desktop.${SECRET_DOMAIN_2}"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    # NGINX Won't serve static content over a POST request so just ignore errors? idk why this works
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      error_page 405 =200 $uri;
    gethomepage.dev/enabled: "false"
  labels:
    app.kubernetes.io/name: *app
    app.kubernetes.io/instance: *app
spec:
  ingressClassName: nginx
  rules:
    - host: &host "desktop.${SECRET_DOMAIN}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: arrstack
                port:
                  name: guacamole
  tls:
    - hosts:
        - *host
      secretName: "arrstack-${SECRET_DOMAIN_2/./-}-production-tls"
#############################################################################################
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: &app arrstack-plex-2
  namespace: networking
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: "plex.${SECRET_DOMAIN_2}"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN_2}"
    nginx.ingress.kubernetes.io/server-snippet: |
      location = / {
        return 301 https://plex.${SECRET_DOMAIN_2}/web/index.html;
      }
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: Media
    gethomepage.dev/name: Plex
    gethomepage.dev/icon: plex.png
    gethomepage.dev/description: Plex Media Player
    gethomepage.dev/widget.type: plex
    gethomepage.dev/widget.url: http://plex.${SECRET_DOMAIN_2}:32400
    gethomepage.dev/widget.key: "{{`{{HOMEPAGE_VAR_PLEX_TOKEN}}`}}"
  labels:
    app.kubernetes.io/name: *app
    app.kubernetes.io/instance: *app
spec:
  ingressClassName: nginx
  rules:
    - host: &host "plex.${SECRET_DOMAIN_2}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: arrstack
                port:
                  name: plex
  tls:
    - hosts:
        - *host
      secretName: "arrstack-${SECRET_DOMAIN_2/./-}-production-tls"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: &app arrstack-overseerr-2
  namespace: networking
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: "overseerr.${SECRET_DOMAIN_2}"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN_2}"
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: Media
    gethomepage.dev/name: Overseerr
    gethomepage.dev/icon: overseerr
    gethomepage.dev/description: Media Request Management
    gethomepage.dev/widget.type: overseerr
    gethomepage.dev/widget.url: http://overseerr.${SECRET_DOMAIN_2}:5055
    gethomepage.dev/widget.key: "{{`{{HOMEPAGE_VAR_OVERSEERR_API_KEY}}`}}"
  labels:
    app.kubernetes.io/name: *app
    app.kubernetes.io/instance: *app
spec:
  ingressClassName: nginx
  rules:
    - host: &host "overseerr.${SECRET_DOMAIN_2}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: arrstack
                port:
                  name: overseerr
  tls:
    - hosts:
        - *host
      secretName: "arrstack-${SECRET_DOMAIN_2/./-}-production-tls"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: &app arrstack-desktop-2
  namespace: networking
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: "desktop.${SECRET_DOMAIN_2}"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN_2}"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    # NGINX Won't serve static content over a POST request so just ignore errors? idk why this works
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      error_page 405 =200 $uri;
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: Networking
    gethomepage.dev/name: Guacamole
    gethomepage.dev/icon: guacamole
    gethomepage.dev/description: Remote Desktop Gateway
  labels:
    app.kubernetes.io/name: *app
    app.kubernetes.io/instance: *app
spec:
  ingressClassName: nginx
  rules:
    - host: &host "desktop.${SECRET_DOMAIN_2}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: arrstack
                port:
                  name: guacamole
  tls:
    - hosts:
        - *host
      secretName: "arrstack-${SECRET_DOMAIN_2/./-}-production-tls"
