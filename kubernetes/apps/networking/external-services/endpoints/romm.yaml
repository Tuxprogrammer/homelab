---
apiVersion: v1
kind: Service
metadata:
  name: &app romm
  namespace: networking
  labels:
    app.kubernetes.io/name: *app
    app.kubernetes.io/instance: *app
spec:
  type: ExternalName
  externalName: store.${SECRET_DOMAIN}
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 30061
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: &app romm
  namespace: networking
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: "roms.${SECRET_DOMAIN}"
    external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
    cert-manager.io/cluster-issuer: letsencrypt-production
    nginx.ingress.kubernetes.io/auth-url: http://ak-outpost-authentik-embedded-outpost.networking.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
    nginx.ingress.kubernetes.io/auth-signin: https://auth.${SECRET_DOMAIN}/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-response-headers: |-
      Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid
    nginx.ingress.kubernetes.io/auth-snippet: |
      proxy_set_header X-Forwarded-Host $http_host;
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: Media
    gethomepage.dev/name: Romm
    gethomepage.dev/icon: romm.png
    gethomepage.dev/description: "Web-based video game library"
    gethomepage.dev/widget.type: "romm"
    gethomepage.dev/widget.url: "https://romm.networking.svc.cluster.local/"
  labels:
    app.kubernetes.io/name: *app
    app.kubernetes.io/instance: *app
spec:
  ingressClassName: nginx
  rules:
    - host: &host roms.${SECRET_DOMAIN}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: *app
                port:
                  number: 8080
  tls:
    - hosts:
        - *host
